Golang OOPs Concepts
29 July 2019
Tags: go golang oops concepts

Poonam Malve

* Agenda
- Introduction to OOPs
- Object-Oriented Language Features
- Object-Oriented Design: The Go Way


* Introduction to OOPs
  OOP based on the definition:
- Is a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods
- an Object’s procedures can access and often modify the attributes of the object with which they are associated
- an Object’s internal state is protected from outside world (encapsulated) leveraging private/protected/public visibility of attributes and methods
- an Object is frequently defined in OO languages as an instance of a Class
- The most striking omission as far as object-oriented is concerned is that there is no type hierarchy in Go.
Contd..

* Introduction to OOPs (Contd..)
  The mentioned concept properties are implemented in most popular OO languages, Java and C++ 
  by mechanics such as:
- Encapsulation (possible on package level in Go)
- Composition (possible through embedding in Go)
- Polymorphism (possible through Interface satisfaction in Go. Type satisfies Interface without manually implementing it if it defines all the Interface methods. Since almost anything can have methods attached, even primitive types such as Int, almost anything can satisfy an interface)
- Inheritance (Go does not provide the typical, type-driven notion of subclassing because it’s fragile and considered a bad practice, inferior to Composition)

* Go Object-Oriented Language Features
- Structs
- Methods
- Embedding
- Interfaces

* 1. Structs:

- A struct defines state. Here is a Student struct. 
- It has a Name field and a integer called ID, which tells us if student got his/her Student ID. 
- Structs hold only state and no behavior.

     type Student struct {
     Name string
     ID int
     }

* 2. Methods:

- Methods are functions that operate on particular types. 
- They have a receiver clause that mandates what type they operate on. 
- Here is a GetData() method that operates on Student structs and prints their state:

      func (s Student) GetData() {
          fmt.Printf("Name: '%s', ID: %d\n", s.Name, s.ID)
      }
          
* 3. Embedding:

- You can embed anonymous types inside each other. 
- If you embed a nameless struct then the embedded struct provides its state (and methods) to the embedding struct directly. 
- Here is example
.code embeddingtypedemo/main.go /^//Part 1/,/^//Part 2/

* 3. Embedding: (Contd..)
.play embeddingtypedemo/main.go /^//Part 2/,/^//END/

- The main purpose of type embedding is to extend the functionalities of the embedded types into the embedding type, so that we don't need to re-implement the functionalities of the embedded types for the embedding type.


* 4. Interface:
- Go isn’t object oriented in the typical sense, i.e. if you’re coming from C#, Java or even C++, but it does offer some features which map to features often available in the OO world in one way or another.
- It does not have exact Inheritance but duck typing. 
.link https://en.wikipedia.org/wiki/Duck_typing Read more about Duck typing here
- Duck typing comes from the phrase – if something looks like a duck, swims like a duck and quacks like a duck then it’s probably a duck.

* Implementation:
.code interfacedemo/main.go /^//Part 1/,/^//Part 2/
Contd..

* Implementation (Contd..):
.play interfacedemo/main.go /^//Part 2/,/^//END/

* Object-Oriented Design: The Go Way
- Let's see how Go measures up against the pillars of object-oriented programming: encapsulation, inheritance, and polymorphism. 
- Those are features of class-based programming languages, which are the most popular object-oriented programming languages.
- At the core, objects are language constructs that have state and behavior that operates on the state and selectively exposes it to other parts of the program. 

* 1. Encapsulation:
- A variable or method of an object is said to be encapsulated if it is inaccessible to clients of the object. 
- Encapsulation, sometimes called information hiding, is a key aspect of object-oriented programming.
- Go has only one mechanism to control the visibility of names: capitalized identifiers are exported from the package in which they are defined, and uncapitalized names are not. 
- The same mechanism that limits access to members of a package also limits access to the fields of a struct or the methods of a type. As a consequence, to encapsulate an object, we must make it a struct.

* 1. Encapsulation Implementation:
- Let's take an example:
- Package name is realestate.
- In this example PropertyOption is an interface with one method private GetName().
.code goencapsulation/realestate/Property.go

* 1. Encapsulation Implementation (Contd..):
- Buiding is a struct with private members.
.code goencapsulation/realestate/Building.go

* 1. Encapsulation Implementation (Contd..):
- House is a struct with private members.
.code goencapsulation/realestate/House.go

* 1. Encapsulation Implementation (Contd..):
.code goencapsulation/main.go

* Output
.link https://drive.google.com/file/d/1kPpPfho_0yFHzm7aNuxXSQH8cjqEcf3r/view?usp=sharing output

* 2. Inheritance:
- Inheritance or subclassing was always a controversial issue. There are many problems with implementation inheritance
- Go does not support inheritance, however it does support composition. 
- Composition can be achieved in Go is by embedding one struct type into another.

* Embedding slice of structs

.code gocomposition/main.go /^//Part 1/,/^//Part 2/

* Contd..
.code gocomposition/main.go /^//Part 2/,/^//Part 3/

* Contd..
.play gocomposition/main.go /^//Part 3/,/^//END/

* 3. Polymorphism:
- Polymorphism is the essence of object-oriented programming:
- In Go this is achieved with the help of interfaces. 
- As we have already discussed, interfaces can be implicitly implemented in Go.

* Polymorphism without interfaces:
.code gopolymorphism/withoutinterface/main.go /^//Part 1/,/^//Part 2/

* Contd..
.play gopolymorphism/withoutinterface/main.go /^//Part 2/,/^//END/

* Polymorphism with interfaces:
.code gopolymorphism/withinterface/main.go /^//Part 1/,/^//Part 2/

* Contd
.play gopolymorphism/withinterface/main.go /^//Part 2/,/^//END/


* Reference
.link https://medium.com/rungo/go-introductory-tutorials-896aeda0fb8a
.link https://gobyexample.com/

